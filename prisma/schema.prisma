generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                   @id @default(uuid())
  fullName            String
  email               String                   @unique
  phone               String                   @unique
  password            String
  bvn                 String?                  @default("not_set")
  bankAccount         String?                  @default("not_set")
  kycStatus           String                   @default("pending")
  createdAt           DateTime                 @default(now())
  isEmailVerified     Boolean                  @default(false)
  idType              String                   @default("NIN")
  updatedAt           DateTime                 @updatedAt
  isAdmin             Boolean                  @default(false)
  isFlagged           Boolean                  @default(false)
  emailVerifications  EmailVerificationToken[]
  loans               Loan[]                   @relation("UserLoans")
  passwordResetTokens PasswordResetToken[]
  refreshTokens       RefreshToken[]
}

model Loan {
  id               String          @id @default(uuid())
  userId           String
  amount           Float
  status           String          @default("pending")
  approvalDate     DateTime?
  duration         Int
  interestRate     Float
  loanType         String
  purpose          String?
  repaymentDate    DateTime?
  repaymentType    String
  category         String
  createdAt        DateTime        @default(now())
  remainingBalance Float           @default(0)
  vendor           String?
  user             User            @relation("UserLoans", fields: [userId], references: [id])
  loanRepayments   LoanRepayment[] @relation("LoanToRepayments")
}

model PasswordResetToken {
  token     String   @id
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model EmailVerificationToken {
  token     String   @id
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model LoanRepayment {
  id            String    @id @default(uuid())
  amountpaid    Float?     @map("amount")
  loanId        String
  repaymentDate DateTime
  paymentDate   DateTime? @db.Timestamp(6)
  createdAt     DateTime? @default(now()) @db.Timestamp(6)
  loan          Loan      @relation("LoanToRepayments", fields: [loanId], references: [id])
}
